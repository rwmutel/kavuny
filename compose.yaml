services:
  consul:
    pull_policy: build
    build:
      dockerfile: Consul.Dockerfile
      context: src/consul
    ports:
      - "8500:8500"
      - "8600:8600/udp"
      - "8600:8600/tcp"
    healthcheck:
      test: ["CMD", "consul", "kv", "get", "kv_initted"]
      interval: 5s
      timeout: 5s
      retries: 5
      start_period: 5s
    networks:
      - kavuny-net

  auth:
    pull_policy: build
    build:
      context: src/auth
    scale: 3
    environment:
      HZ_NETWORK_RESTAPI_ENABLED: true
      HZ_CLUSTERNAME: auth_hazelcast
      HZ_MAP: sessions
      POSTGRES_ADDR: auth-db
      GIN_MODE: release
      CONSUL_ADDR: consul:8500
    networks:
      - kavuny-net
    depends_on:
      consul:
        condition: service_healthy
    # ports:
    #   - "8000-8002:8080"
  auth-db:
    image: postgres:latest
    environment:
      POSTGRES_USER: auth-service
      POSTGRES_PASSWORD: pass
    volumes:
      - ./src/demo_data/create.sql:/docker-entrypoint-initdb.d/create.sql
      - ./src/demo_data/users.csv:/opt/demo_data/users.csv
    networks:
      - kavuny-net

  coffee-packs:
    image: coffee-packs
    build:
      context: src/coffee-packs
      dockerfile: CoffeePacks.Dockerfile
    networks:
      - kavuny-net
    depends_on:
      packs-db:
        condition: service_healthy
      consul:
        condition: service_healthy
    environment:
      CONSUL_ADDR: consul:8500
    # ports:
    #   - "8003:8080"
  packs-db:
    build:
      context: src/coffee-packs
      dockerfile: Postgres.Dockerfile
    environment:
      POSTGRES_USER: user
      POSTGRES_DB: kavuny
      POSTGRES_HOST_AUTH_METHOD: trust
    volumes:
      - ./src/coffee-packs/demo_data:/opt/demo_data
    networks:
      - kavuny-net
    healthcheck:
      test: ["CMD-SHELL", "pg_isready", "-d", "db_prod"]
      interval: 10s
      timeout: 10s
      retries: 5
      start_period: 10s

  coffee-shops:
    image: coffee-shops
    build:
      context: src/coffee-shops
      dockerfile: CoffeeShops.Dockerfile
    networks:
      - kavuny-net
    depends_on:
      shops-db:
        condition: service_healthy
      packs-db:
        condition: service_healthy
      consul:
        condition: service_healthy
    environment:
      CONSUL_ADDR: consul:8500
    # ports:
    #   - "8004:8080"
  shops-db:
    build:
      context: src/coffee-shops
      dockerfile: Postgres.Dockerfile
    environment:
      POSTGRES_USER: user
      POSTGRES_DB: kavuny
      POSTGRES_HOST_AUTH_METHOD: trust
    volumes:
      - ./src/coffee-shops/demo_data:/opt/demo_data
    networks:
      - kavuny-net
    healthcheck:
      test: ["CMD-SHELL", "pg_isready", "-d", "db_prod"]
      interval: 10s
      timeout: 10s
      retries: 5
      start_period: 10s

  check-ins:
    build:
      context: src/check-ins
      dockerfile: CheckIns.Dockerfile
    depends_on:
      check-ins-db-1:
        condition: service_healthy
      consul:
        condition: service_healthy
    networks:
      - kavuny-net
    # ports:
    #   - "8005:8080"
    environment:
      CONSUL_ADDR: consul:8500
  check-ins-db-1:
    build:
      context: src/check-ins
      dockerfile: Cassandra.Dockerfile
    networks:
      - kavuny-net
    healthcheck:
      test: ["CMD-SHELL", "nodetool status | grep UN"]
      interval: 15s
      timeout: 20s
      retries: 5
      start_period: 20s
  check-ins-db-2:
    image: cassandra:latest
    networks:
      - kavuny-net
    environment:
      - CASSANDRA_SEEDS=check-ins-db-1
    depends_on:
      check-ins-db-1:
        condition: service_healthy
    healthcheck:
      test: ["CMD-SHELL", "nodetool status | grep UN"]
      interval: 15s
      timeout: 20s
      retries: 3
      start_period: 20s

  logging-service:
    image: project-log:latest
    pull_policy: build
    build:
      context: src/log
    environment:
      CONSUL_ADDR: consul:8500
      LOG_FILE: /opt/app/logs/log.log
    volumes:
      - ./logs:/opt/app/logs
    networks:
      - kavuny-net
    depends_on:
      consul:
        condition: service_healthy

  zookeeper:
    image: bitnami/zookeeper:latest
    environment:
      ALLOW_ANONYMOUS_LOGIN: yes
    networks:
      - kavuny-net
    healthcheck:
      test: echo srvr | nc zookeeper 2181 || exit 1
      timeout: 5s
      retries: 3
      interval: 30s
  kafka:
    image: bitnami/kafka:latest
    environment:
      KAFKA_CFG_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_CFG_AUTO_CREATE_TOPICS_ENABLE: true
    networks:
      - kavuny-net
    depends_on:
      - zookeeper

  nginx:
    image: nginx:latest
    ports:
      - "8080:8080"
    volumes:
      - ./nginx.conf:/etc/nginx/conf.d/default.conf
    networks:
      - kavuny-net

networks:
  kavuny-net:
    driver: bridge
